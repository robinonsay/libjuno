/*
    MIT License

    Copyright (c) 2025 Robin A. Onsay

    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files
    (the "Software"), to deal in the Software without restriction,
    including without limitation the rights to use, copy, modify, merge,
    publish, distribute, sublicense, and/or sell copies of the Software,
    and to permit persons to whom the Software is furnished to do so,
    subject to the following conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.
*/

/**
    This API has been generated by LibJuno:
    https://www.robinonsay.com/libjuno/
*/

/**
    This header contains the juno_buff_queue library API
    @author
*/
#ifndef JUNO_BUFF_QUEUE_API_HPP
#define JUNO_BUFF_QUEUE_API_HPP
#include "juno/status.h"
#include "juno/module.h"
#include "juno/module.hpp"
#include "juno/types.hpp"
#include <cstddef>

namespace juno
{
namespace buff
{

/**
    The queue buffer API
*/
template<typename T, const size_t N>
struct QUEUE_API_T;

/**
    The queue buffer module
*/
template<typename T, const size_t N>
union QUEUE_T;

/**
    The queue root implementation
*/
template<typename T, const size_t N>
struct QUEUE_ROOT_T JUNO_MODULE_ROOT(JUNO_MODULE_ARG(QUEUE_API_T<T,N>),
    ARRAY_T<T,N> tArrBuff;
    size_t iStartIndex;
    size_t zLength;
);

/**
    The queue buffer API
*/
template<typename T, const size_t N>
struct QUEUE_API_T
{
    /// Enqueue data into the queue buffer
    JUNO_STATUS_T (*Enqueue)(QUEUE_T<T, N>& tQueue, T tData);
    /// Dequeue data from the queue buffer
    RESULT_T<T> (*Dequeue)(QUEUE_T<T, N>& tQueue);
    /// Peek at the next data item in the queue buffer. Calling Dequeue would dequeue this
    RESULT_T<T*> (*Peek)(QUEUE_T<T, N>& tQueue);
};


/// The stack buffer api
template<typename T, const size_t N>
struct STACK_API_T;

/// The stack module
template<typename T, const size_t N>
union STACK_T;

/// The stack root module
template<typename T, const size_t N>
struct STACK_ROOT_T JUNO_MODULE_ROOT(JUNO_MODULE_ARG(STACK_API_T<T,N>),
    ARRAY_T<T,N> tArrBuff;
    size_t zLength;
);

/// The stack API
template<typename T, const size_t N>
struct STACK_API_T
{
    /// Push data onto the stack buffer
    JUNO_STATUS_T (*Push)(STACK_T<T, N>& tStack, T tData);
    /// Pop data from the stack buffer
    RESULT_T<T> (*Pop)(STACK_T<T, N>& tStack);
    /// Peek into data on the stack buffer
    RESULT_T<T*> (*Peek)(STACK_T<T, N>& tStack);
};

}
}

#endif // JUNO_BUFF_QUEUE_API_H
