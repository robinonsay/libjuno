/*
    MIT License

    Copyright (c) 2025 Robin A. Onsay

    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files
    (the "Software"), to deal in the Software without restriction,
    including without limitation the rights to use, copy, modify, merge,
    publish, distribute, sublicense, and/or sell copies of the Software,
    and to permit persons to whom the Software is furnished to do so,
    subject to the following conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.
*/

/**
    This API has been generated by LibJuno:
    https://www.robinonsay.com/libjuno/
*/

/**
    This header contains the juno_buff_queue library API
    @author
*/
#ifndef JUNO_BUFF_QUEUE_API_HPP
#define JUNO_BUFF_QUEUE_API_HPP
#include "juno/macros.h"
#include "juno/status.h"
#include "juno/module.h"
#include "juno/module.hpp"
#include "juno/types.h"
#include "buff_queue_api.h"
#include "buff_stack_api.h"
#include "juno/types.hpp"
#include <cstddef>

template<typename T, const size_t N>
struct JUNO_BUFF_QUEUE_IMPL_T JUNO_MODULE_DERIVE(JUNO_BUFF_QUEUE_ROOT_T,
private:
    JUNO_ARRAY_T<T,N> *ptArr;
public:
    static JUNO_RESULT_T<JUNO_BUFF_QUEUE_IMPL_T<T, N>> New(JUNO_ARRAY_T<T,N>& tArr, JUNO_FAILURE_HANDLER_T pfcnFailureHandler, JUNO_USER_DATA_T *pvFailureUserData)
    {
        JUNO_BUFF_QUEUE_IMPL_T<T, N> tNew{};
        tNew.tRoot._pfcnFailureHandler = pfcnFailureHandler;
        tNew.tRoot._pvFailurUserData = pvFailureUserData;
        tNew.tRoot.iStartIndex = 0;
        tNew.tRoot.zCapacity = N;
        tNew.tRoot.zLength = 0;
        tNew.ptArr = &tArr;
        return JUNO_RESULT_T<JUNO_BUFF_QUEUE_IMPL_T<T, N>>{JUNO_STATUS_SUCCESS, tNew};
    }

    JUNO_RESULT_T<T> Dequeue()
    {
        JUNO_RESULT_T<T> tResult{};
        auto iIndexResult = JunoBuff_QueueDequeue(&tRoot);
        tResult.tStatus = iIndexResult.tStatus;
        ASSERT_SUCCESS(iIndexResult.tStatus, return tResult);
        tResult.tSuccess = ptArr->tArr[iIndexResult.tSuccess];
        return tResult;
    }
    JUNO_STATUS_T Enqueue(T tData)
    {
        auto iIndexResult = JunoBuff_QueueEnqueue(&tRoot);
        ASSERT_SUCCESS(iIndexResult.tStatus, return iIndexResult.tStatus);
        ptArr->tArr[iIndexResult.tSuccess] = tData;
        return JUNO_STATUS_SUCCESS;
    }
    JUNO_RESULT_T<T*> Peek()
    {
        JUNO_RESULT_T<T*> tResult{};
        auto iIndexResult = JunoBuff_QueueGetIndex(&tRoot);
        tResult.tStatus = iIndexResult.tStatus;
        ASSERT_SUCCESS(iIndexResult.tStatus, return tResult);
        tResult.tSuccess = &ptArr->tArr[iIndexResult.tSuccess];
        return tResult;
    }
);

template<typename T, const size_t N, typename Q = JUNO_BUFF_QUEUE_IMPL_T<T, N>>
struct JUNO_BUFF_QUEUE_T
{
private:
    Q tQueueImpl;
public:
    static JUNO_RESULT_T<JUNO_BUFF_QUEUE_T<T,N,Q>> New(JUNO_ARRAY_T<T,N>& tArr, JUNO_FAILURE_HANDLER_T pfcnFailureHandler, JUNO_USER_DATA_T *pvFailureUserData)
    {
        JUNO_BUFF_QUEUE_T<T,N,Q> tNew{};
        auto tResult = JUNO_RESULT_T<JUNO_BUFF_QUEUE_T<T,N,Q>>{JUNO_STATUS_SUCCESS, tNew};
        JUNO_RESULT_T<Q> tQResult = Q::New(tArr, pfcnFailureHandler, pvFailureUserData);
        ASSERT_SUCCESS(tQResult.tStatus, tResult.tStatus = tQResult.tStatus; return tResult);
        tNew.tQueueImpl = tQResult.tSuccess;
        tResult.tSuccess = tNew;
        return tResult;
    }

    JUNO_RESULT_T<T> Dequeue()
    {
        return tQueueImpl.Dequeue();
    }
    JUNO_STATUS_T Enqueue(T tData)
    {
        return tQueueImpl.Enqueue(tData);
    }
    JUNO_RESULT_T<T*> Peek()
    {
        return tQueueImpl.Peek();   
    }
    size_t GetCapacity()
    {
        return tQueueImpl.tRoot.zCapacity;
    }
};

template<typename T, const size_t N>
struct JUNO_BUFF_STACK_IMPL_T JUNO_MODULE_DERIVE(JUNO_BUFF_STACK_ROOT_T,
private:
    T tArrBuff[N];
public:
    static JUNO_RESULT_T<JUNO_BUFF_STACK_IMPL_T<T, N>> New(JUNO_FAILURE_HANDLER_T pfcnFailureHandler, JUNO_USER_DATA_T *pvFailureUserData)
    {
        JUNO_BUFF_STACK_IMPL_T<T, N> tNew{};
        tNew.tRoot._pfcnFailureHandler = pfcnFailureHandler;
        tNew.tRoot._pvFailurUserData = pvFailureUserData;
        tNew.tRoot.zCapacity = N;
        tNew.tRoot.zLength = 0;
        return JUNO_RESULT_T<JUNO_BUFF_STACK_IMPL_T<T, N>>{JUNO_STATUS_SUCCESS, tNew};
    }

    JUNO_RESULT_T<T> Pop()
    {
        JUNO_RESULT_T<T> tResult{};
        auto iIndexResult = JunoBuff_StackPop(&tRoot);
        tResult.tStatus = iIndexResult.tStatus;
        ASSERT_SUCCESS(iIndexResult.tStatus, return tResult);
        tResult.tSuccess = tArrBuff[iIndexResult.tSuccess];
        return tResult;
    }
    JUNO_STATUS_T Push(T tData)
    {
        auto iIndexResult = JunoBuff_StackPush(&tRoot);
        ASSERT_SUCCESS(iIndexResult.tStatus, return iIndexResult.tStatus);
        tArrBuff[iIndexResult.tSuccess] = tData;
        return JUNO_STATUS_SUCCESS;
    }
    JUNO_RESULT_T<T*> Peek()
    {
        JUNO_RESULT_T<T*> tResult{};
        auto iIndexResult = JunoBuff_StackPeek(&tRoot);
        tResult.tStatus = iIndexResult.tStatus;
        ASSERT_SUCCESS(iIndexResult.tStatus, return tResult);
        tResult.tSuccess = &tArrBuff[iIndexResult.tSuccess];
        return tResult;
    }
);

template<typename T, const size_t N, typename S = JUNO_BUFF_STACK_IMPL_T<T, N>>
struct JUNO_BUFF_STACK_T
{
private:
    S tStackImpl;
public:
    static JUNO_RESULT_T<JUNO_BUFF_STACK_T<T, N>> New(JUNO_FAILURE_HANDLER_T pfcnFailureHandler, JUNO_USER_DATA_T *pvFailureUserData)
    {
        JUNO_BUFF_STACK_T<T,N,S> tNew{};
        auto tResult = JUNO_RESULT_T<JUNO_BUFF_STACK_T<T,N,S>>{JUNO_STATUS_SUCCESS, tNew};
        JUNO_RESULT_T<S> tQResult = S::New(pfcnFailureHandler, pvFailureUserData);
        ASSERT_SUCCESS(tQResult.tStatus, tResult.tStatus = tQResult.tStatus; return tResult);
        tNew.tStackImpl = tQResult.tSuccess;
        tResult.tSuccess = tNew;
        return tResult;
    }

    JUNO_RESULT_T<T> Pop()
    {
        return tStackImpl.Pop();
    }
    JUNO_STATUS_T Push(T tData)
    {
        return tStackImpl.Push(tData);

    }
    JUNO_RESULT_T<T*> Peek()
    {
        return tStackImpl.Peek;
    }
    size_t GetCapacity()
    {
        return tStackImpl.tRoot.zCapacity;
    }
};

#endif // JUNO_BUFF_QUEUE_API_H
