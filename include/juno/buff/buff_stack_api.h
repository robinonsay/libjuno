/*
    MIT License

    Copyright (c) 2025 Robin A. Onsay

    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files
    (the "Software"), to deal in the Software without restriction,
    including without limitation the rights to use, copy, modify, merge,
    publish, distribute, sublicense, and/or sell copies of the Software,
    and to permit persons to whom the Software is furnished to do so,
    subject to the following conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.
*/

/**
    This API has been generated by LibJuno:
    https://www.robinonsay.com/libjuno/
*/

/**
    This header contains the juno_buff_stack library API
    @author
*/
#ifndef JUNO_BUFF_STACK_API_H
#define JUNO_BUFF_STACK_API_H
#include "juno/macros.h"
#include "juno/status.h"
#include "juno/module.h"
#include "juno/types.h"
#ifdef __cplusplus
extern "C"
{
#endif

typedef struct JUNO_BUFF_STACK_ROOT_TAG JUNO_BUFF_STACK_ROOT_T;
typedef union JUNO_BUFF_STACK_T JUNO_BUFF_STACK_T;

struct JUNO_BUFF_STACK_ROOT_TAG JUNO_MODULE_ROOT(void,
    size_t zLength;
    size_t zCapacity;
);

static inline JUNO_STATUS_T JunoBuff_StackInit(JUNO_BUFF_STACK_T *ptStack, size_t zCapacity, JUNO_FAILURE_HANDLER_T pfcnFailureHdlr, JUNO_USER_DATA_T *pvFailureUserData)
{
    ASSERT_EXISTS(ptStack);
    JUNO_BUFF_STACK_ROOT_T *ptStackRoot = (JUNO_BUFF_STACK_ROOT_T *)(ptStack);
    ptStackRoot->zLength = 0;
    ptStackRoot->zCapacity = zCapacity;
    ptStackRoot->_pfcnFailureHandler = pfcnFailureHdlr;
    ptStackRoot->_pvFailureUserData = pvFailureUserData;
    return JUNO_STATUS_SUCCESS;
}

static inline JUNO_RESULT_SIZE_T JunoBuff_StackPush(JUNO_BUFF_STACK_T *ptStack)
{
    JUNO_RESULT_SIZE_T tResult = {JUNO_STATUS_SUCCESS,0};
    if(!ptStack)
    {
        tResult.tStatus = JUNO_STATUS_NULLPTR_ERROR;
        return tResult;
    }
    JUNO_BUFF_STACK_ROOT_T *ptStackRoot = (JUNO_BUFF_STACK_ROOT_T *)(ptStack);
    if(ptStackRoot->zLength < ptStackRoot->zCapacity)
    {
        tResult.tSuccess = ptStackRoot->zLength;
        ptStackRoot->zLength += 1;
    }
    else
    {
        tResult.tStatus = JUNO_STATUS_INVALID_SIZE_ERROR;
        JUNO_FAIL(tResult.tStatus, ptStackRoot->_pfcnFailureHandler, ptStackRoot->_pvFailureUserData, "Failed to enqueue data");
        return tResult;
    }
    return tResult;
}

static inline JUNO_RESULT_SIZE_T JunoBuff_StackPop(JUNO_BUFF_STACK_T *ptStack)
{
    JUNO_RESULT_SIZE_T tResult = {JUNO_STATUS_SUCCESS,0};
    if(!ptStack)
    {
        tResult.tStatus = JUNO_STATUS_NULLPTR_ERROR;
        return tResult;
    }
    JUNO_BUFF_STACK_ROOT_T *ptStackRoot = (JUNO_BUFF_STACK_ROOT_T *)(ptStack);
    if(ptStackRoot->zLength > 0)
    {
        ptStackRoot->zLength -= 1;
        tResult.tSuccess = ptStackRoot->zLength;
        return tResult;
    }
    tResult.tStatus = JUNO_STATUS_INVALID_SIZE_ERROR;
    JUNO_FAIL(tResult.tStatus, ptStackRoot->_pfcnFailureHandler, ptStackRoot->_pvFailureUserData, "Failed to enqueue data");
    return tResult;
}

static inline JUNO_RESULT_SIZE_T JunoBuff_StackPeek(JUNO_BUFF_STACK_T *ptStack)
{
    JUNO_RESULT_SIZE_T tResult = {JUNO_STATUS_SUCCESS,0};
    if(!ptStack)
    {
        tResult.tStatus = JUNO_STATUS_NULLPTR_ERROR;
        return tResult;
    }
    JUNO_BUFF_STACK_ROOT_T *ptStackRoot = (JUNO_BUFF_STACK_ROOT_T *)(ptStack);
    tResult.tSuccess = ptStackRoot->zLength;
    return tResult;
}


#ifdef __cplusplus
}
#endif
#endif // JUNO_BUFF_STACK_API_H
