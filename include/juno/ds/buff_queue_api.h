/*
    MIT License

    Copyright (c) 2025 Robin A. Onsay

    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files
    (the "Software"), to deal in the Software without restriction,
    including without limitation the rights to use, copy, modify, merge,
    publish, distribute, sublicense, and/or sell copies of the Software,
    and to permit persons to whom the Software is furnished to do so,
    subject to the following conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.
*/

/**
    This API has been generated by LibJuno:
    https://www.robinonsay.com/libjuno/
*/

/**
    This header contains the juno_buff_queue library API
    @author
*/
#ifndef JUNO_BUFF_QUEUE_API_H
#define JUNO_BUFF_QUEUE_API_H
#include "juno/macros.h"
#include "juno/status.h"
#include "juno/module.h"
#include "juno/types.h"
#ifdef __cplusplus
extern "C"
{
#endif

/// The Buffer queue root
typedef struct JUNO_BUFF_QUEUE_ROOT_TAG JUNO_BUFF_QUEUE_ROOT_T;
/// The Buffer queue module
typedef union JUNO_BUFF_QUEUE_T JUNO_BUFF_QUEUE_T;

/// The root buffee queue
struct JUNO_BUFF_QUEUE_ROOT_TAG JUNO_MODULE_ROOT(void,
    /// The start index of the buffer (ie the first element)
    size_t iStartIndex;
    /// The current length of the buffer
    size_t zLength;
    /// The capacity of the buffer
    size_t zCapacity;
);

/// Initialize a buffer queue with a capacity
static inline JUNO_STATUS_T JunoBuff_QueueInit(JUNO_BUFF_QUEUE_T *ptQueue, size_t zCapacity, JUNO_FAILURE_HANDLER_T pfcnFailureHdlr, JUNO_USER_DATA_T *pvFailureUserData)
{
    ASSERT_EXISTS(ptQueue);
    JUNO_BUFF_QUEUE_ROOT_T *ptQueueRoot = (JUNO_BUFF_QUEUE_ROOT_T *)(ptQueue);
    ptQueueRoot->iStartIndex = 0;
    ptQueueRoot->zLength = 0;
    ptQueueRoot->zCapacity = zCapacity;
    ptQueueRoot->_pfcnFailureHandler = pfcnFailureHdlr;
    ptQueueRoot->_pvFailureUserData = pvFailureUserData;
    return JUNO_STATUS_SUCCESS;
}

/// Enqueue an item into the buffer
/// @returns The index to place the enqueued item
static inline JUNO_RESULT_SIZE_T JunoBuff_QueueEnqueue(JUNO_BUFF_QUEUE_T *ptQueue)
{
    JUNO_RESULT_SIZE_T tResult = {JUNO_STATUS_SUCCESS,0};
    if(!ptQueue)
    {
        tResult.tStatus = JUNO_STATUS_NULLPTR_ERROR;
        return tResult;
    }
    JUNO_BUFF_QUEUE_ROOT_T *ptQueueRoot = (JUNO_BUFF_QUEUE_ROOT_T *)(ptQueue);
    if(ptQueueRoot->zLength < ptQueueRoot->zCapacity)
    {
        tResult.tSuccess = (ptQueueRoot->iStartIndex + ptQueueRoot->zLength) % ptQueueRoot->zCapacity;
        ptQueueRoot->zLength += 1;
    }
    else
    {
        tResult.tStatus = JUNO_STATUS_INVALID_SIZE_ERROR;
        JUNO_FAIL(tResult.tStatus, ptQueueRoot->_pfcnFailureHandler, ptQueueRoot->_pvFailureUserData, "Failed to enqueue data");
        return tResult;
    }
    return tResult;
}

/// Dequeue an item from the buffer
/// @returns The index to dequeue the item from
static inline JUNO_RESULT_SIZE_T JunoBuff_QueueDequeue(JUNO_BUFF_QUEUE_T *ptQueue)
{
    JUNO_RESULT_SIZE_T tResult = {JUNO_STATUS_SUCCESS,0};
    if(!ptQueue)
    {
        tResult.tStatus = JUNO_STATUS_NULLPTR_ERROR;
        return tResult;
    }
    JUNO_BUFF_QUEUE_ROOT_T *ptQueueRoot = (JUNO_BUFF_QUEUE_ROOT_T *)(ptQueue);
    if(ptQueueRoot->zLength > 0)
    {
        tResult.tSuccess = ptQueueRoot->iStartIndex;
        ptQueueRoot->iStartIndex = (ptQueueRoot->iStartIndex + 1) % ptQueueRoot->zCapacity;
        ptQueueRoot->zLength -= 1;
        return tResult;
    }
    tResult.tStatus = JUNO_STATUS_ERR;
    JUNO_FAIL(tResult.tStatus, ptQueueRoot->_pfcnFailureHandler, ptQueueRoot->_pvFailureUserData, "Queue is empty");
    return tResult;
}

/// Peek at the next item in the queue
/// @returns the index of the next item in the queue
static inline JUNO_RESULT_SIZE_T JunoBuff_QueuePeek(JUNO_BUFF_QUEUE_T *ptQueue)
{
    JUNO_RESULT_SIZE_T tResult = {JUNO_STATUS_SUCCESS,0};
    if(!ptQueue)
    {
        tResult.tStatus = JUNO_STATUS_NULLPTR_ERROR;
        return tResult;
    }
    JUNO_BUFF_QUEUE_ROOT_T *ptQueueRoot = (JUNO_BUFF_QUEUE_ROOT_T *)(ptQueue);
    if(ptQueueRoot->zLength == 0)
    {
        tResult.tStatus = JUNO_STATUS_INVALID_SIZE_ERROR;
        JUNO_FAIL(tResult.tStatus, ptQueueRoot->_pfcnFailureHandler, ptQueueRoot->_pvFailureUserData, "Failed to enqueue data");
        return tResult;
    }
    tResult.tSuccess = ptQueueRoot->iStartIndex;
    return tResult;
}


#ifdef __cplusplus
}
#endif
#endif // JUNO_BUFF_QUEUE_API_H
