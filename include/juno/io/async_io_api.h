/*
    MIT License

    Copyright (c) 2025 Robin A. Onsay

    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files
    (the "Software"), to deal in the Software without restriction,
    including without limitation the rights to use, copy, modify, merge,
    publish, distribute, sublicense, and/or sell copies of the Software,
    and to permit persons to whom the Software is furnished to do so,
    subject to the following conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.
*/

/**
    This API has been generated by LibJuno:
    https://www.robinonsay.com/libjuno/
*/

/**
    This header contains the io library API
    @author
*/
#ifndef JUNO_ASYNC_IO_API_H
#define JUNO_ASYNC_IO_API_H
#include "juno/status.h"
#include "juno/module.h"
#include "juno/time/time_api.h"
#include <stdbool.h>
#ifdef __cplusplus
extern "C"
{
#endif

typedef struct JUNO_ASYNC_IO_API_TAG JUNO_ASYNC_IO_API_T;

typedef union JUNO_ASYNC_IO_TAG JUNO_ASYNC_IO_T;
typedef struct JUNO_ASYNC_IO_ROOT_TAG JUNO_ASYNC_IO_ROOT_T;

struct JUNO_ASYNC_IO_ROOT_TAG JUNO_MODULE_ROOT(JUNO_ASYNC_IO_API_T, JUNO_MODULE_EMPTY);

struct JUNO_ASYNC_IO_API_TAG
{
    /// Read the specified number of bytes from the IO
    JUNO_STATUS_T (*Read)(JUNO_ASYNC_IO_T *ptIo, char *pcBuff, size_t zBuffSize);
    /// Try to read from the IO until timeout expires
    JUNO_STATUS_T (*TryRead)(JUNO_ASYNC_IO_T *ptIo, char *pcBuff, size_t zBuffSize, JUNO_TIME_MICROS_T iTimeoutUs);
    /// Read from the IO until the set of characters is recieved
    JUNO_STATUS_T (*ReadUntil)(JUNO_ASYNC_IO_T *ptIo, char *pcBuff, size_t zBuffSize, const char *pcStopChars, size_t zSizeStopChars);
    /// Try to read from the IO until the set of characters is recieved
    JUNO_STATUS_T (*TryReadUntil)(JUNO_ASYNC_IO_T *ptIo, char *pcBuff, size_t zBuffSize, const char *pcStopChars, size_t zSizeStopChars, JUNO_TIME_MICROS_T iTimeoutUs);
    /// Write the specified number of bytes to the IO
    JUNO_STATUS_T (*Write)(JUNO_ASYNC_IO_T *ptIo, const void *pvBuff, size_t zBuffSize);
    /// Try to write the specified number of bytes to the IO
    JUNO_STATUS_T (*TryWrite)(JUNO_ASYNC_IO_T *ptIo, const void *pvBuff, size_t zBuffSize, JUNO_TIME_MICROS_T iTimeoutUs);
    /// Poll the IO
    JUNO_STATUS_T (*Poll)(JUNO_ASYNC_IO_T *ptIo, JUNO_TIME_MICROS_T iTimeoutUs, bool *pbHasData);
};

#ifdef __cplusplus
}
#endif
#endif // JUNO_ASYNC_IO_API_H
