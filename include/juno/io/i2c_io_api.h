/*
    MIT License

    Copyright (c) 2025 Robin A. Onsay

    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files
    (the "Software"), to deal in the Software without restriction,
    including without limitation the rights to use, copy, modify, merge,
    publish, distribute, sublicense, and/or sell copies of the Software,
    and to permit persons to whom the Software is furnished to do so,
    subject to the following conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.
*/

/**
    This API has been generated by LibJuno:
    https://www.robinonsay.com/libjuno/
*/

/**
    This header contains the io library API
    @author
*/
#ifndef JUNO_I2C_IO_API_H
#define JUNO_I2C_IO_API_H
#include "juno/status.h"
#include "juno/module.h"
#include "juno/time/time_api.h"
#include <stdbool.h>
#include <stdint.h>
#ifdef __cplusplus
extern "C"
{
#endif

typedef struct JUNO_I2C_IO_API_TAG JUNO_I2C_IO_API_T;
typedef struct JUNO_I2C_IO_MSG_R_TAG JUNO_I2C_IO_MSG_R_T;
typedef struct JUNO_I2C_IO_MSG_W_TAG JUNO_I2C_IO_MSG_W_T;
typedef struct JUNO_I2C_IO_MSG_HDR_TAG JUNO_I2C_IO_MSG_HDR_T;
typedef union JUNO_I2C_IO_MSG_TAG JUNO_I2C_IO_MSG_T;
JUNO_MODULE_DECLARE(JUNO_I2C_IO_T);
JUNO_MODULE_ROOT_DECLARE(JUNO_I2C_IO_ROOT_T);

typedef enum JUNO_I2C_IO_MSG_TYPE_TAG
{
    JUNO_I2C_IO_MSG_TYPE_RESERVED = 0,
    JUNO_I2C_IO_MSG_TYPE_W = 1,
    JUNO_I2C_IO_MSG_TYPE_R = 2,
} JUNO_I2C_IO_MSG_TYPE_T;

struct JUNO_I2C_IO_MSG_HDR_TAG
{
    JUNO_I2C_IO_MSG_TYPE_T tType;
    uint8_t iAddr;
};

struct JUNO_I2C_IO_MSG_R_TAG
{
    JUNO_I2C_IO_MSG_HDR_T tHdr;
    uint8_t *ptReadBuff;
    size_t zReadBuffSize;
};

struct JUNO_I2C_IO_MSG_W_TAG
{
    JUNO_I2C_IO_MSG_HDR_T tHdr;
    const void *ptWriteBuff;
    size_t zWriteBuffSize;
};

union JUNO_I2C_IO_MSG_TAG
{
    JUNO_I2C_IO_MSG_HDR_T tHdr;
    JUNO_I2C_IO_MSG_W_T tWrite;
    JUNO_I2C_IO_MSG_R_T tRead;
};

#define ReadMsg(iAddr, pcBuff, zBuffSize) \
(JUNO_I2C_IO_MSG_T) \
{ \
    .tRead = (JUNO_I2C_IO_MSG_R_T) \
    { \
        .tHdr = {JUNO_I2C_IO_MSG_TYPE_R, iAddr}, \
        .ptReadBuff = pcBuff, \
        .zReadBuffSize = zBuffSize \
    } \
}

#define WriteMsg(iAddr, pvBuff, zBuffSize) \
(JUNO_I2C_IO_MSG_T) \
{ \
    .tWrite = (JUNO_I2C_IO_MSG_W_T) \
    { \
        .tHdr = {JUNO_I2C_IO_MSG_TYPE_W, iAddr}, \
        .ptWriteBuff = pvBuff, \
        .zWriteBuffSize = zBuffSize \
    } \
}

JUNO_MODULE_ROOT(JUNO_I2C_IO_ROOT_T, JUNO_I2C_IO_API_T, JUNO_MODULE_EMPTY);

#define JUNO_I2C_IO_TRANSFER(...) (JUNO_I2C_IO_MSG_T[]){__VA_ARGS__}

struct JUNO_I2C_IO_API_TAG
{
    /**
        Perform an I2C transfer.
        A typical call would look like:

        ```
        ptApi->Transfer(ptI2c, JUNO_I2C_IO_TRANSFER{WriteMsg(0xFF, ptMyWriteBuff, sizeof(ptMyWriteBuff))}, 1)
        // OR
        JUNO_I2C_IO_MSG_T ptArrTransfer[] = JUNO_I2C_IO_TRANSFER{WriteMsg(0xFF, ptMyWriteBuff, sizeof(ptMyWriteBuff))};
        ptApi->Transfer(ptI2c, ptArrTransfer, sizeof(ptArrTransfer) / sizeof(ptArrTransfer[0]));
        ```
    */
    JUNO_STATUS_T (*Transfer)(JUNO_I2C_IO_T *ptI2c, const JUNO_I2C_IO_MSG_T *ptArrMsgs, size_t zMsgArrLen);
};

#ifdef __cplusplus
}
#endif
#endif // JUNO_I2C_IO_API_H
