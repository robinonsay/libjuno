/*
    MIT License

    Copyright (c) 2025 Robin A. Onsay

    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files
    (the "Software"), to deal in the Software without restriction,
    including without limitation the rights to use, copy, modify, merge,
    publish, distribute, sublicense, and/or sell copies of the Software,
    and to permit persons to whom the Software is furnished to do so,
    subject to the following conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.
*/

/**
    This API has been generated by LibJuno:
    https://www.robinonsay.com/libjuno/
*/

/**
    This header contains the juno_map library API
    @author
*/
#ifndef JUNO_MAP_API_H
#define JUNO_MAP_API_H
#include "juno/hash/hash_api.h"
#include "juno/memory/memory_api.h"
#include "juno/status.h"
#include "juno/module.h"
#include <stdbool.h>
#ifdef __cplusplus
extern "C"
{
#endif

typedef struct JUNO_MAP_API_TAG JUNO_MAP_API_T;
typedef bool (*JUNO_MAP_KEY_EQUAL_FCN_T)(JUNO_MEMORY_T ptKey1, JUNO_MEMORY_T ptKey2);

typedef union JUNO_MAP_TAG JUNO_MAP_T;
typedef struct JUNO_MAP_ROOT_TAG JUNO_MAP_ROOT_T;

struct JUNO_MAP_ROOT_TAG JUNO_MODULE_ROOT(JUNO_MAP_API_T,
    JUNO_HASH_T *ptHash;
    JUNO_MEMORY_T *ptMapKeys;
    JUNO_MEMORY_T *ptMapValues;
    size_t zCapacity;
    size_t zLenHashTable;
    JUNO_MAP_KEY_EQUAL_FCN_T pfcnIsEqual;
);

struct JUNO_MAP_API_TAG
{
    /// Add a key,value pair to the map
    /// @param ptMap A pointer to the map
    /// @param ptKey A key to add
    /// @param pvValue A value to add
    /// @return Status of operation
    JUNO_STATUS_T (*Set)(JUNO_MAP_T *ptMap, JUNO_MEMORY_T tKey, JUNO_MEMORY_T tValue);
    
    /// Remove a key,value pair from the map
    /// @param ptMap A pointer to the map
    /// @param tKey The key to remove
    /// @return Status of operation
    JUNO_STATUS_T (*Remove)(JUNO_MAP_T *ptMap, JUNO_MEMORY_T tKey);
    
    /// Get a value from the map using the key
    /// @param ptMap A pointer to the map
    /// @param tKey The key to use
    /// @param ptRetVal The return value retrieved using the key
    /// @return Status of operation
    /// Returns `JUNO_STATUS_DNE_ERROR` if the key is not in the map
    JUNO_STATUS_T (*Get)(JUNO_MAP_T *ptMap, JUNO_MEMORY_T tKey, JUNO_MEMORY_T *ptRetValue);
};

#ifdef __cplusplus
}
#endif
#endif // JUNO_MAP_API_H
