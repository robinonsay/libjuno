/*
    MIT License

    Copyright (c) 2025 Robin A. Onsay

    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files
    (the "Software"), to deal in the Software without restriction,
    including without limitation the rights to use, copy, modify, merge,
    publish, distribute, sublicense, and/or sell copies of the Software,
    and to permit persons to whom the Software is furnished to do so,
    subject to the following conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.
*/

/**
    This API has been generated by LibJuno:
    https://www.robinonsay.com/libjuno/
*/

/**
    This header contains the juno_memory library API
    @author
*/
#ifndef JUNO_MEMORY_API_H
#define JUNO_MEMORY_API_H
#include "juno/status.h"
#include "juno/module.h"
#include <stddef.h>
#ifdef __cplusplus
extern "C"
{
#endif
/// @brief Macro to declare a static memory block and its associated free stack.
/// @param name Name of the memory block.
/// @param type Data type of each block element.
/// @param length Number of elements in the memory block.
#define JUNO_MEMORY_BLOCK(name, type, length) static type name[length] = {}

/// @brief Macro to declare a static array for memory metadata.
/// @param name Name of the metadata array.
/// @param length Number of metadata entries.
#define JUNO_MEMORY_BLOCK_METADATA(name, length) static JUNO_MEMORY_BLOCK_METADATA_T name[length] = {}

/// Define a reference for memory
#define JUNO_REF(name) REF##name
/// Create a new reference for memory
#define JUNO_NEW_REF(name) JUNO_MEMORY_T *JUNO_REF(name)

typedef struct JUNO_MEMORY_BLOCK_METADATA_TAG JUNO_MEMORY_BLOCK_METADATA_T;
typedef struct JUNO_MEMORY_BLOCK_TAG JUNO_MEMORY_BLOCK_T;
typedef struct JUNO_MEMORY_TAG JUNO_MEMORY_T;

/// The memory metadata
struct JUNO_MEMORY_BLOCK_METADATA_TAG
{
    uint8_t *ptFreeMem;
};

/// @brief Structure for an allocated memory segment.
/// Describes the allocated memory with a pointer to the start and its size.
struct JUNO_MEMORY_TAG
{
    /// Pointer to the allocated memory.
    void *pvAddr;
    /// Size of the allocated memory, in bytes.
    size_t zSize;
    /// The reference count for this memory
    size_t iRefCount;
};

typedef struct JUNO_MEMORY_ALLOC_API_TAG JUNO_MEMORY_ALLOC_API_T;

typedef union JUNO_MEMORY_ALLOC_TAG JUNO_MEMORY_ALLOC_T;
typedef struct JUNO_MEMORY_ALLOC_ROOT_TAG JUNO_MEMORY_ALLOC_ROOT_T;

struct JUNO_MEMORY_ALLOC_ROOT_TAG JUNO_MODULE_ROOT(JUNO_MEMORY_ALLOC_API_T, JUNO_MODULE_EMPTY);

struct JUNO_MEMORY_ALLOC_API_TAG
{
    /// @brief Allocates memory using the specified memory allocation method.
    /// 
    /// @param ptMem Pointer to the memory allocation structure.
    /// @param pvRetAddr Pointer to a memory descriptor where allocation details will be stored.
    /// @param zSize Size of the memory block to allocate in bytes.
    /// @return JUNO_STATUS_T Status of the allocation operation.
    JUNO_STATUS_T (*Get)(JUNO_MEMORY_ALLOC_T *ptMem, JUNO_MEMORY_T *pvRetAddr, size_t zSize);

    /// @brief Updates an existing memory allocation to a new size.
    /// 
    /// @param ptMem Pointer to the memory allocation structure.
    /// @param ptMemory Pointer to the memory descriptor to update.
    /// @param zNewSize The new size for the memory block.
    /// @return JUNO_STATUS_T Status of the update operation.
    JUNO_STATUS_T (*Update)(JUNO_MEMORY_ALLOC_T *ptMem, JUNO_MEMORY_T *ptMemory, size_t zNewSize);

    /// @brief Frees an allocated memory block.
    /// 
    /// @param ptMem Pointer to the memory allocation structure.
    /// @param pvAddr Pointer to the memory block to free.
    /// @return JUNO_STATUS_T Status of the free operation.
    JUNO_STATUS_T (*Put)(JUNO_MEMORY_ALLOC_T *ptMem, JUNO_MEMORY_T *pvAddr);
};


/// Get the reference to this juno memory
/// - This function will track the reference count to this memory
/// - The reference count is used to prevent freeing of used memory
/// - When using `JUNO_MEMORY_T` it is recommended to pass memory
///   around using this function to increment/decrement the reference count
/// @param ptMemory The memory to get the reference to
/// @return The reference to the memory
static inline JUNO_MEMORY_T * Juno_MemoryGetRef(JUNO_MEMORY_T *ptMemory)
{
    if(ptMemory->iRefCount)
    {
        ptMemory->iRefCount += 1;
    }
    return ptMemory;
}

/// Put the reference to this juno memory
/// - This function will track the reference count to this memory
/// - The reference count is used to prevent freeing of used memory
/// - When using `JUNO_MEMORY_T` it is recommended to pass memory
///   around using this function to increment /decrement the reference count
/// @param ptMemory The memory to put the reference away
/// @return The reference to the memory
static inline void Juno_MemoryPutRef(JUNO_MEMORY_T *ptMemory)
{
    if(ptMemory->iRefCount)
    {
        ptMemory->iRefCount -= 1;
    }
}



#ifdef __cplusplus
}
#endif
#endif // JUNO_MEMORY_API_H
