/*
    MIT License

    Copyright (c) 2025 Robin A. Onsay

    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files
    (the "Software"), to deal in the Software without restriction,
    including without limitation the rights to use, copy, modify, merge,
    publish, distribute, sublicense, and/or sell copies of the Software,
    and to permit persons to whom the Software is furnished to do so,
    subject to the following conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.
*/

/**
    This API has been generated by LibJuno:
    https://www.robinonsay.com/libjuno/
*/

/**
    This header contains the juno_memory block blockementation
    @author
*/
#ifndef JUNO_MEMORY_BLOCK_H
#define JUNO_MEMORY_BLOCK_H
#include "juno/module.h"
#include "juno/status.h"
#include "juno/memory/memory_api.h"
#ifdef __cplusplus
extern "C"
{
#endif


JUNO_MODULE_DERIVE_DECLARE(JUNO_MEMORY_ALLOC_BLOCK_T);

JUNO_MODULE_DERIVE(JUNO_MEMORY_ALLOC_BLOCK_T, JUNO_MEMORY_ALLOC_ROOT_T,
    uint8_t *pvMemory;                  ///< Pointer to the allocated memory area.
    JUNO_MEMORY_BLOCK_METADATA_T *ptMetadata; ///< Array of metadata for each block.
    size_t zTypeSize;                   ///< Size of each block element.
    size_t zLength;                     ///< Total number of blocks available.
    size_t zUsed;                       ///< Current count of allocated blocks.
    size_t zFreed;                      ///< Current count of freed blocks in the free stack.
);

#ifdef JUNO_MEMORY_DEFAULT
/**
    This is the default blockementation for `JUNO_MEMORY_T`.
    If you want to derive new blockementations for `JUNO_MEMORY_T`
    use `#define JUNO_MEMORY_DERIVED` prior to including
    `#include "juno_memory_block.h"`

    Note: If you are blockementing a derived module you will need
    to blockement `JUNO_MEMORY_BLOCK`.
*/
JUNO_MODULE(JUNO_MEMORY_ALLOC_T, JUNO_MEMORY_ALLOC_API_T, JUNO_MEMORY_ALLOC_ROOT_T,
    JUNO_MEMORY_ALLOC_BLOCK_T tJunoMemoryBlock;
);
#endif

/// @brief Initializes a memory block for allocation.
/// Sets up a memory block with an associated free stack for managing fixed-size allocations.
/// @param ptMemBlk Pointer to the memory block structure to initialize.
/// @param pvMemory Pointer to the contiguous memory used for allocations.
/// @param pvMetadata Pointer to an array for block metadata tracking.
/// @param zTypeSize Size in bytes of each element in the block.
/// @param zLength Total number of possible allocations.
/// @param pfcnFailureHandler Callback function to handle failures.
/// @param pvUserData User data passed to the failure handler.
/// @return JUNO_STATUS_T Status of the initialization.
JUNO_STATUS_T JunoMemory_BlockApi(JUNO_MEMORY_ALLOC_T *ptJunoMemory,
    void *pvMemory,
    JUNO_MEMORY_BLOCK_METADATA_T *ptMetadata,
    size_t zTypeSize,
    size_t zLength,
    JUNO_FAILURE_HANDLER_T pfcnFailureHandler,
    JUNO_USER_DATA_T *pvFailureUserData
);
#ifdef __cplusplus
}
#endif
#endif // JUNO_MEMORY_BLOCK_H

